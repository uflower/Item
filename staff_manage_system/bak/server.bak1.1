#include <stdio.h>
#include <sys/types.h>        
#include <sys/socket.h>
#include <stdlib.h>
#include <linux/in.h>
#include <sqlite3.h>
#include <sys/select.h>
#include <unistd.h>
#include <string.h>


#define N 128
#define S 1
#define U 2
#define A 3
#define D 4
#define H 5

#define DATABASE "info.db"

typedef struct{
	int type;
	char name[32];
	char word[128];
}MSG;


int menu_admin(int acceptfd, MSG *msg, sqlite3 *db);
int menu_user(int acceptfd, MSG *msg, sqlite3 *db);
int do_select(int acceptfd, MSG *msg, sqlite3 *db);
int select_callback(void* arg,int f_num,char** f_value,char** f_name);


int main(int argc, const char *argv[])
{
	if(argc != 2)
	{
		printf("Usage: %s <PORT>\n", argv[0]);
		exit(-1);
	}


	int sockfd, acceptfd, maxfd;
	fd_set readfds, tempfds;
	FD_ZERO(&readfds);	
	FD_ZERO(&tempfds);	

	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if(sockfd < 0)
	{
		perror("socket failed");
		exit(-1);
	}
	printf("socket seccess\n");
	FD_SET(sockfd, &readfds);
	maxfd = sockfd;


	struct sockaddr_in server_addr, client_addr;
	socklen_t server_len, client_len;
	server_addr.sin_family = AF_INET;
	server_addr.sin_port = htons(atoi(argv[1]));
	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	server_len = sizeof(server_addr);
	client_len = sizeof(client_addr);
	if(bind(sockfd, (struct sockaddr *)&server_addr, server_len) < 0)
	{
		perror("bind failed");
		exit(-1);
	}
	printf("bind ok\n");

	if(listen(sockfd, 8) < 0)
	{
		perror("listen failed");
	}
	printf("listen ok\n");

	//打开数据库	
	sqlite3 *db;
	if(sqlite3_open(DATABASE, &db) != SQLITE_OK)
	{
		printf("%s\n", sqlite3_errmsg(db));
		exit(-1);
	}
	else
	{
		printf("database open success!\n");
	}


	int ret, i = 0;
	MSG msg;
	while(1)
	{
		tempfds = readfds;
		printf("waitting select:\n");
		ret = select(maxfd + 1, &tempfds, NULL, NULL, NULL);
		if(ret < 0)
		{
			printf("select failed\n");
			exit(-1);
		}
		else
		{
			for(i = 0; i < (maxfd + 1); i++)
			{
				if(FD_ISSET(i, &tempfds))
				{
					if(i == 3)
					{
						acceptfd = accept(sockfd, (struct sockaddr*)&client_addr, &client_len);
						printf("FD:%d IP:%s PORT:%d\n", acceptfd, (char *)inet_ntoa(client_addr.sin_addr.s_addr), client_addr.sin_port);
						FD_SET(acceptfd, &readfds);
						maxfd = acceptfd > maxfd ? acceptfd : maxfd;
					}
					else
					{
						printf("waitting recv:\n");
						ret = recv(i, &msg, sizeof(msg), 0);
						if(ret < 0)
						{
							perror("recv");
							return -1;
						}
						else if(ret == 0)
						{
							FD_CLR(i, &readfds);
							close(i);
							continue;
						}
						else
						{
							printf("type:%d  name:%s word:%s\n", msg.type, msg.name, msg.word);
							switch(msg.type)
							{
								case 10: menu_admin(i, &msg, db);	break;
								case 20: menu_user(i, &msg, db);	break;
								default:
										 printf("input error\n");
							};
						}
					}
				}
			}
		}
	}

	return 0;
}


int menu_admin(int acceptfd, MSG *msg, sqlite3 *db)
{
	printf("this is menu_admin\n");
	printf("type:%d  name:%s word:%s\n", msg->type, msg->name, msg->word);
	if((strncmp(msg->name, "admin", 6) == 0) && (strncmp(msg->word, "admin", 6) == 0))
	{
		strcpy(msg->word, "OK");
		printf("admin login\n");
		send(acceptfd, msg, sizeof(MSG), 0);
	}
	else
	{
		printf("useer/passed error\n");
		strcpy(msg->word, "error");
		send(acceptfd, msg, sizeof(MSG), 0);
	}

	int ret;
	ret = recv(acceptfd, msg, sizeof(MSG), 0);
	if(ret < 0)
	{
		perror("recv");
		return -1;
	}

	switch(msg->type)
	{
	case S: do_select(acceptfd, msg, db);	break;
	default:
			 printf("input error\n");
	};


	return 0;
}

int select_callback(void* arg,int f_num,char** f_value,char** f_name)
{
	int acceptfd;
	MSG msg;
	acceptfd = *((int *)arg);

	sprintf(msg.word, "%s, %s, %s, %s, %s, %s, %s, %s, %s, %s", f_value[0], f_value[1], f_value[2], f_value[3], f_value[4], f_value[5], f_value[6], f_value[7], f_value[8], f_value[9]);

	send(acceptfd, &msg, sizeof(MSG), 0);

	return 0;
}


int do_select(int acceptfd, MSG *msg, sqlite3 *db)
{
	char sql[128] = {0};
	char *errmsg;

	if(strncmp(msg->word, "S1", 3) == 0)
	{
		printf("指定查询\n");
		memset(sql, sizeof(sql), 0);
		sprintf(sql, "select * from staff where name = '%s'", msg->name);
		if(sqlite3_exec(db, sql, select_callback,(void *)&acceptfd, &errmsg)!= SQLITE_OK)
		{
			printf("%s\n", errmsg);
		}
		else
		{
			printf("select one done.\n");
		}
	}

	if(strncmp(msg->word, "S2", 3) == 0)
	{
		printf("查询所有\n");
		memset(sql, sizeof(sql), 0);
		strcpy(sql, "select * from staff");
		if(sqlite3_exec(db, sql, select_callback,(void *)&acceptfd, &errmsg)!= SQLITE_OK)
		{
			printf("%s\n", errmsg);
		}
		else
		{
			printf("select all done.\n");
		}

		msg->word[0] = '\0';
		send(acceptfd, msg, sizeof(MSG), 0);
	}

	return 0;
}

int menu_user(int acceptfd, MSG *msg, sqlite3 *db)
{
	return 0;
}
